// breakpoints 
$small-screen : 768px !default;
$medium-screen : 1024px!default;
$large-screen : 1200px !default;
$extra-large-screen : 1980px !default;

// media queries
$small: "only screen and (max-width: #{$small-screen})";
$medium: "only screen and (max-width: #{$medium-screen})";
$large: "only screen and (max-width: #{$large-screen})";
$extra-large: "only screen and (max-width: #{$extra-large-screen})";
$landscape: "only screen and (orientation: landscape)";
$portrait: "only screen and (orientation: portrait)";

// Grid variables
$default-float : left !default;
$opposite-direction : right !default;

$total-columns: 12 !default;
$row-width : 980px !default;
$column-gutter : 10px !default;

$collapsed-grid : false !default;


// Grid Function
@function gridCalc($col-number, $total-columns) {
  @return percentage(($col-number / $total-columns));
}

// For creating container, nested, and collapsed rows.
@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    width: auto;
    margin-#{$default-float}: -($column-gutter/2);
    margin-#{$opposite-direction}: -($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }

  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  }

  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }

  // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
  }

  // Clearfix for all rows
  @include clearfix();

}


// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:true) {

  position: relative;

  // If collapsed, get rid of gutter padding
  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }

  // Gutter padding whenever a column isn't set to collapse
  // (use $collapse:null to do nothing)
  @else if $collapse == false {
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }

  // If a column number is given, calculate width
  @if $columns {
    width: gridCalc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column { float: $opposite-direction; }
  }

  // If offset, calculate appropriate margins
  @if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }

  // Source Ordering, adds left/right depending on which you use.
  @if $push { #{$default-float}: gridCalc($push, $total-columns); #{$opposite-direction}: auto; }
  @if $pull { #{$opposite-direction}: gridCalc($pull, $total-columns); #{$default-float}: auto; }

  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none !important;
  }

  @if $float {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }

}

// génération des classes html correspondantes

// Defaut = desktop (lg)
.row {
  @include grid-row();
  .row {
  	margin-left:0; margin-right:0;
    *[class^="col-"] { @include grid-column($collapse:true); }
  }
  *[class^="col-"] + *[class^="col-"]:last-child { float: $opposite-direction; }
}
@for $i from 1 through $total-columns {
   .col-lg-#{$i} { @include grid-column($i,$collapse:$collapsed-grid);}
}


// small classes
@media #{$small} {
  //*[class^="col-"] { @include grid-column($columns:false); }
  @for $i from 1 through $total-columns {
    .col-sm-#{$i} { @include grid-column($i,$collapse:$collapsed-grid);}
  }
}


// medium classes
@media #{$medium} {
  //*[class^="col-"] { @include grid-column($columns:false); }
  @for $i from 1 through $total-columns {
    .col-md-#{$i} { @include grid-column($i,$collapse:$collapsed-grid);}
  }
}

// medium classes
@media #{$extra-large} {
  //*[class^="col-"] { @include grid-column($columns:false); }
  @for $i from 1 through $total-columns {
    .col-xl-#{$i} { @include grid-column($i,$collapse:$collapsed-grid);}
  }
}
